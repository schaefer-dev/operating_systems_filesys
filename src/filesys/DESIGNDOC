             +-------------------------+
             |            OS           |
             | PROJECT 4: FILE SYSTEMS |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Daniel Schaefer <s9dlscae@stud.uni-saarland.de>
Christian Bohnenberger <s9cnbohn@stud.uni-saarland.de>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//TODO: check if "define" has to be added

in inode.h:
/* struct which describes indirect_block which contains NUMBER_INDIRECT_POINTERS
   amount of pointers */
struct indirect_block
  {
    block_sector_t block_pointers[NUMBER_INDIRECT_POINTERS];
  };


struct bitmap;

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
 {
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    bool directory;                     /* indicates if inode is a directory*/
    block_sector_t parent;              /* block sector of parent */
    unsigned index_level;               /* level 0 -> direct, 1->indirect,
                                           2->double-indirect */
    off_t current_index;                /* stores current index */
    off_t indirect_index;               /* indirect index */
    off_t double_indirect_index;        /* double indirect index */
    uint32_t unused[NUMBER_UNUSED_BYTES];                /* not used */
    /* pointers to blocks with file content: */
    block_sector_t direct_pointers[NUMBER_DIRECT_BLOCKS];               
    block_sector_t indirect_pointers[NUMBER_INDIRECT_BLOCKS];               
    block_sector_t double_indirect_pointers[NUMBER_DOUBLE_INDIRECT_BLOCKS];               
  };


/* In-memory inode. */
struct inode 
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
    off_t data_length;                  /* length of the file in bytes */
    off_t reader_length;                /* length of the file in bytes */
    bool directory;                     /* indicates if inode is a directory*/
    block_sector_t parent;              /* block sector of parent */

    /* stores index structure information */
    unsigned index_level;               /* level 0 -> direct, 1->indirect,
     2->double-indirect */
    off_t current_index;
    off_t indirect_index;
    off_t double_indirect_index;

    struct lock inode_extend_lock;      /* synchronises extension of file */
    struct lock inode_directory_lock;   /* lock to synchronise removing and
                                            adding of directories */
    struct lock inode_field_lock;       /* synchronies metadata */

    /* pointers to blocks with file content: */
    block_sector_t direct_pointers[NUMBER_DIRECT_BLOCKS];               
    block_sector_t indirect_pointers[NUMBER_INDIRECT_BLOCKS];               
    block_sector_t double_indirect_pointers[NUMBER_DOUBLE_INDIRECT_BLOCKS];              
  };

Explanations: 
1.) struct indirect blocks: struct which describes indirect_block which 
contains NUMBER_INDIRECT_POINTER amount of pointers

2.) struct inode disk: describes an on-disk inode.
Fiels in struct:
- off_t length: indicates the file size in bytes
- unsigned magic: magic number
- bool directory: boolean which stores if the inode is handled as normal file
or a directory (true if inode is directory)
- block_sector_t parent: stores the block_sector of the parent to open the
parent directory (only used if inode is directory)
- unsigned index_level: stores the current index level; 0 indicates direct 
blocks; 1 means indirect blocks; 2 means double indirect blocks
- off_t current_index: saves the next free index on the top-level layer
(direct block index, or the position in the indirect block array)
- off_t indirect_index: current offest within a indirect or the number of the
current indirect block in double indexed block
- off_t double_indirect_index: current index in the last in case of double
indirect blocks (only used for double indirect blocks)
- uint32_t unused[NUMBER_UNUSED_BYTES]: used to page-aligne the inode_disk
struct
- block_sector_t direct_pointers[NUMBER_DIRECT_BLOCKS]: array which stores
all direct pointer of length NUMBER_DIRECT_BLOCKS
- block_sector_t indirect_pointers[NUMBER_INDIRECT_BLOCKS]: array which stores
the indirect block pointers of length NUMBER_INDIRECT_BLOCKS
- block_sector_t double_indirect_pointers[NUMBER_DOUBLE_INDIRECT_BLOCKS]:
array which stores the double indirect block pointers of length
NUMBER_DOUBLE_INDIRECT_BLOCKS

3.) struct inode: structure to store inodes
Fields:
similar to disk_inode however without unused bytes but with some locks to
ensure secure synchronisation:
- struct lock inode_extend_lock: synchronises extension of file and ensures
that only one file can grow at a time
- struct lock inode_directory_lock: lock to synchronise removing and 
adding of directories to prevent adding 2 directories at a time etc.
- struct lock inode_field_lock: synchronies metadata to ensure consistency
of the inode metadata

- off_t data_length: indicates the length of a file in bytes this is set
during a write which needs a file extension to ensure save reads and file
extension
- off_t reader_length: length of the file in bytes only visible for readers
to prevent reading wrong bytes during a file extension


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

//TODO: probably pointer are changed (NUMBER_DIRECT_POINTER,...)


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

                 BUFFER CACHE
                 ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
